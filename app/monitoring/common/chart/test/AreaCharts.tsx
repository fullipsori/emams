"use client"

import dynamic from "next/dynamic";
import React, { useEffect, useState, useRef } from "react";
// import ReactApexChart from "react-apexcharts";
import { dataSeries, githubdata, seriesData } from '../../data/series';
import getChartColorsArray from "../ChartsDynamicColor";
// import useInterval from "@/app/components/common/useInterval";

// import Charts from 'react-apexcharts';
// import ApexCharts from 'apexcharts';

const ReactApexChart = dynamic(() => import("react-apexcharts"), { ssr: false });
// const Charts = dynamic(() => import("react-apexcharts"), { ssr: false });
// const Charts = dynamic(() => import("react-apexcharts"), { ssr: false });

// const ApexCharts = dynamic(() => import("apexcharts"), { ssr: false });

export function useInterval(callback: () => void, delay: number | null) {
  const savedCallback = useRef(callback)

  // Remember the latest callback if it changes.
  //useIsomorphicLayoutEffect
  React.useEffect(() => {
    savedCallback.current = callback
  }, [callback])

  // Set up the interval.
  useEffect(() => {
    // Don't schedule if no delay is specified.
    // Note: 0 is a valid value for delay.
    if (!delay && delay !== 0) {
      return
    }

    const id = setInterval(() => savedCallback.current(), delay)

    return () => clearInterval(id)
  }, [delay])
}

const AxisChart = ({dataColors} : any) => {

    const [BasicAreaChartsColors, setBasicAreaChartsColors] = useState<string[]>([]);

    useEffect( () => {
        setBasicAreaChartsColors(getChartColorsArray(dataColors));
    }, []);

    const testData = [
            [1327359599999, 30.95],
            [1327445999999, 31.34],
            [1327532399999, 31.18],
            [1327618799999, 31.05],
            [1327877999999, 31.00],
            [1327964399999, 30.95],
            [1328050799999, 31.24],
            [1328137199999, 31.29],
            [1328223599999, 31.85],
            [1328482799999, 31.86],
            [1328569199999, 32.28],
            [1328655599999, 32.10],
            [1328741999999, 32.65],
            [1328828399999, 32.21],
            [1329087599999, 32.35],
            [1329173999999, 32.44],
            [1329260399999, 32.46],
            [1329346799999, 32.86],
            [1329433199999, 32.75],
            [1329778799999, 32.54],
            [1329865199999, 32.33],
            [1329951599999, 32.97],
            [1330037999999, 33.41],
            [1330297199999, 33.27],
            [1330383599999, 33.27],
            [1330469999999, 32.89],
            [1330556399999, 33.10],
            [1330642799999, 33.73],
            [1330901999999, 33.22],
            [1330988399999, 31.99],
            [1331074799999, 32.41],
            [1331161199999, 33.05],
            [1331247599999, 33.64],
            [1331506799999, 33.56],
            [1331593199999, 34.22],
            [1331679599999, 33.77],
            [1331765999999, 34.17],
            [1331852399999, 33.82],
            [1332111599999, 34.51],
            [1332197999999, 33.16],
            [1332284399999, 33.56],
            [1332370799999, 33.71],
            [1332457199999, 33.81],
            [1332712799999, 34.40],
            [1332799199999, 34.63],
            [1332885599999, 34.46],
            [1332971999999, 34.48],
            [1333058399999, 34.31],
            [1333317599999, 34.70],
            [1333403999999, 34.31],
            [1333490399999, 33.46],
            [1333576799999, 33.59],
            [1333922399999, 33.22],
            [1334008799999, 32.61],
            [1334095199999, 33.01],
            [1334181599999, 33.55],
            [1334267999999, 33.18],
            [1334527199999, 32.84],
            [1334613599999, 33.84],
            [1334699999999, 33.39],
            [1334786399999, 32.91],
            [1334872799999, 33.06],
            [1335131999999, 32.62],
            [1335218399999, 32.40],
            [1335304799999, 33.13],
            [1335391199999, 33.26],
            [1335477599999, 33.58],
            [1335736799999, 33.55],
            [1335823199999, 33.77],
            [1335909599999, 33.76],
            [1335995999999, 33.32],
            [1336082399999, 32.61],
            [1336341599999, 32.52],
            [1336427999999, 32.67],
            [1336514399999, 32.52],
            [1336600799999, 31.92],
            [1336687199999, 32.20],
            [1336946399999, 32.23],
            [1337032799999, 32.33],
            [1337119199999, 32.36],
            [1337205599999, 32.01],
            [1337291999999, 31.31],
            [1337551199999, 32.01],
            [1337637599999, 32.01],
            [1337723999999, 32.18],
            [1337810399999, 31.54],
            [1337896799999, 31.60],
            [1338242399999, 32.05],
            [1338328799999, 31.29],
            [1338415199999, 31.05],
            [1338501599999, 29.82],
            [1338760799999, 30.31],
            [1338847199999, 30.70],
            [1338933599999, 31.69],
            [1339019999999, 31.32],
            [1339106399999, 31.65],
            [1339365599999, 31.13],
            [1339451999999, 31.77],
            [1339538399999, 31.79],
            [1339624799999, 31.67],
            [1339711199999, 32.39],
            [1339970399999, 32.63],
            [1340056799999, 32.89],
            [1340143199999, 31.99],
            [1340229599999, 31.23],
            [1340315999999, 31.57],
            [1340575199999, 30.84],
            [1340661599999, 31.07],
            [1340747999999, 31.41],
            [1340834399999, 31.17],
            [1340920799999, 32.37],
            [1341179999999, 32.19],
            [1341266399999, 32.51],
            [1341439199999, 32.53],
            [1341525599999, 31.37],
            [1341784799999, 30.43],
            [1341871199999, 30.44],
            [1341957599999, 30.20],
            [1342043999999, 30.14],
            [1342130399999, 30.65],
            [1342389599999, 30.40],
            [1342475999999, 30.65],
            [1342562399999, 31.43],
            [1342648799999, 31.89],
            [1342735199999, 31.38],
            [1342994399999, 30.64],
            [1343080799999, 30.02],
            [1343167199999, 30.33],
            [1343253599999, 30.95],
            [1343339999999, 31.89],
            [1343599199999, 31.01],
            [1343685599999, 30.88],
            [1343771999999, 30.69],
            [1343858399999, 30.58],
            [1343944799999, 32.02],
            [1344203999999, 32.14],
            [1344290399999, 32.37],
            [1344376799999, 32.51],
            [1344463199999, 32.65],
            [1344549599999, 32.64],
            [1344808799999, 32.27],
            [1344895199999, 32.10],
            [1344981599999, 32.91],
            [1345067999999, 33.65],
            [1345154399999, 33.80],
            [1345413599999, 33.92],
            [1345499999999, 33.75],
            [1345586399999, 33.84],
            [1345672799999, 33.50],
            [1345759199999, 32.26],
            [1346018399999, 32.32],
            [1346104799999, 32.06],
            [1346191199999, 31.96],
            [1346277599999, 31.46],
            [1346363999999, 31.27],
            [1346709599999, 31.43],
            [1346795999999, 32.26],
            [1346882399999, 32.79],
            [1346968799999, 32.46],
            [1347227999999, 32.13],
            [1347314399999, 32.43],
            [1347400799999, 32.42],
            [1347487199999, 32.81],
            [1347573599999, 33.34],
            [1347832799999, 33.41],
            [1347919199999, 32.57],
            [1348005599999, 33.12],
            [1348091999999, 34.53],
            [1348178399999, 33.83],
            [1348437599999, 33.41],
            [1348523999999, 32.90],
            [1348610399999, 32.53],
            [1348696799999, 32.80],
            [1348783199999, 32.44],
            [1349042399999, 32.62],
            [1349128799999, 32.57],
            [1349215199999, 32.60],
            [1349301599999, 32.68],
            [1349387999999, 32.47],
            [1349647199999, 32.23],
            [1349733599999, 31.68],
            [1349819999999, 31.51],
            [1349906399999, 31.78],
            [1349992799999, 31.94],
            [1350251999999, 32.33],
            [1350338399999, 33.24],
            [1350424799999, 33.44],
            [1350511199999, 33.48],
            [1350597599999, 33.24],
            [1350856799999, 33.49],
            [1350943199999, 33.31],
            [1351029599999, 33.36],
            [1351115999999, 33.40],
            [1351202399999, 34.01],
            [1351637999999, 34.02],
            [1351724399999, 34.36],
            [1351810799999, 34.39],
            [1352069999999, 34.24],
            [1352156399999, 34.39],
            [1352242799999, 33.47],
            [1352329199999, 32.98],
            [1352415599999, 32.90],
            [1352674799999, 32.70],
            [1352761199999, 32.54],
            [1352847599999, 32.23],
            [1352933999999, 32.64],
            [1353020399999, 32.65],
            [1353279599999, 32.92],
            [1353365999999, 32.64],
            [1353452399999, 32.84],
            [1353625199999, 33.40],
            [1353884399999, 33.30],
            [1353970799999, 33.18],
            [1354057199999, 33.88],
            [1354143599999, 34.09],
            [1354229999999, 34.61],
            [1354489199999, 34.70],
            [1354575599999, 35.30],
            [1354661999999, 35.40],
            [1354748399999, 35.14],
            [1354834799999, 35.48],
            [1355093999999, 35.75],
            [1355180399999, 35.54],
            [1355266799999, 35.96],
            [1355353199999, 35.53],
            [1355439599999, 37.56],
            [1355698799999, 37.42],
            [1355785199999, 37.49],
            [1355871599999, 38.09],
            [1355957999999, 37.87],
            [1356044399999, 37.71],
            [1356303599999, 37.53],
            [1356476399999, 37.55],
            [1356562799999, 37.30],
            [1356649199999, 36.90],
            [1356908399999, 37.68],
            [1357081199999, 38.34],
            [1357167599999, 37.75],
            [1357253999999, 38.13],
            [1357513199999, 37.94],
            [1357599599999, 38.14],
            [1357685999999, 38.66],
            [1357772399999, 38.62],
            [1357858799999, 38.09],
            [1358117999999, 38.16],
            [1358204399999, 38.15],
            [1358290799999, 37.88],
            [1358377199999, 37.73],
            [1358463599999, 37.98],
            [1358809199999, 37.95],
            [1358895599999, 38.25],
            [1358981999999, 38.10],
            [1359068399999, 38.32],
            [1359327599999, 38.24],
            [1359413999999, 38.52],
            [1359500399999, 37.94],
            [1359586799999, 37.83],
            [1359673199999, 38.34],
            [1359932399999, 38.10],
            [1360018799999, 38.51],
            [1360105199999, 38.40],
            [1360191599999, 38.07],
            [1360277999999, 39.12],
            [1360537199999, 38.64],
            [1360623599999, 38.89],
            [1360709999999, 38.81],
            [1360796399999, 38.61],
            [1360882799999, 38.63],
            [1361228399999, 38.99],
            [1361314799999, 38.77],
            [1361401199999, 38.34],
            [1361487599999, 38.55],
            [1361746799999, 38.11],
            [1361833199999, 38.59],
            [1361919599999, 39.60],
        ];

    var trigoStrength = 3
    var iteration = 11
    function getRandom(): number {
        var i = iteration;
        return (Math.sin(i / trigoStrength) * (i / trigoStrength) + i / trigoStrength + 1) * (trigoStrength * 2)
    }
    var displayCount: number = 50;
    var testDataIndex = 0;
    const testDataSize = testData.length;

    const [realTime, setRealTime] = useState(true);
    const [dataStream, setDataStream] = useState([[0, 0]]);
    const series = [
        {
            name: 'PendingSeries',
            data: dataStream
        },
    ];

    async function appendData(dataStream: any) {
        const prev = dataStream;
        if(prev.length >= displayCount) {
            prev.shift();
        }
        const testItem = testData[(testDataIndex++ % testDataSize)];
        prev.push(testItem);
        console.log("" + testDataIndex + " item:" + testItem + " count:" + prev.length);
        ApexCharts.exec('pending-chart', 'updateSeries', [{
            data: dataStream
        }]);
        setDataStream(prev);
    }

    /* 동작 않됨
    useEffect(() => {
        ApexCharts.exec('pending-chart', 'updateSeries', [{
            data: dataStream
        }])

        return () => {
            console.log("useEffect pending-chart");
        }
    }, [dataStream]);
    */

    // useEffect(() => {
    //     const intervalId = setInterval(appendData, 1000);
    //     return () => {
    //         clearInterval(intervalId);
    //     }
    // }, []);
    useInterval( () => { appendData(dataStream) },1000);

    var options : any = {
        chart: {
            id: 'pending-chart',
            type: 'area',
            height: 320,
            zoom: {
                autoScaleYaxis: true
            },
            toolbar: {
                show: false
            },

            stacked: false,
            animations: {
                enabled: true,
                easing: 'linear',
                dynamicAnimation: {
                    speed: 300
                }
            },

            // events: {
            //     animationEnd: function (chartCtx: any, opts : any) {
            //         console.log("animationEnd: " + opts.el.node.getAttribute('index'));
            //         // data 를 가져오는 함수 추가.
            //         const newData1 = chartCtx.w.config.series[0].data.slice()
            //         if(newData1.length >= displayCount) {
            //             newData1.shift();
            //         }
            //         newData1.push(testData[(testDataIndex++ % testDataSize)]);

            //         if(opts.el.node.getAttribute('index') === '0') {
            //             console.log("time")
            //             window.setTimeout(function () {
            //                 chartCtx.updateOptions({
            //                     series:[{
            //                         data: newData1
            //                     },],
            //                     subtitle: {
            //                         text: parseInt((getRandom() * Math.random()).toString()).toString(),
            //                     }
            //                 }, false, false)
            //             }, 300)
            //         }
            //     }
            // }, 
        },
        colors: BasicAreaChartsColors ,
        annotations: {
            yaxis: [{
                y: 30,
                borderColor: '#999',
                label: {
                    show: true,
                    text: 'Support',
                    style: {
                        color: "#fff",
                        background: '#e83e8c'
                    }
                }
            }],
            xaxis: [{
                x: new Date('14 Nov 2012').getTime(),
                borderColor: '#999',
                yAxisIndex: 0,
                label: {
                    show: true,
                    text: 'Rally',
                    style: {
                        color: "#fff",
                        background: '#564ab1'
                    }
                }
            }]
        },
        dataLabels: {
            enabled: false
        },
        markers: {
            size: 0,
            style: 'hollow',
        },
        xaxis: {
            type: 'datetime',
            min: new Date('01 Mar 2012').getTime(),
            tickAmount: 6,
        },
        yaxis: {
            min: 0,
            max: 50,
        },
        tooltip: {
            x: {
                format: 'dd MMM yyyy'
            }
        },
        fill: {
            type: 'gradient',
            gradient: {
                shadeIntensity: 1,
                inverseColors: false,
                opacityFrom: 0.45,
                opacityTo: 0.05,
                stops: [20, 100, 100, 100]
            },
        },
        stroke: {
            curve: 'straight',
            width: 5,
        },
    };

    return (
        <React.Fragment>
            <ReactApexChart dir="rtl"
                options={options}
                series={series}
                type="area"
                height="320"
                width="640"
                className="apex-charts"
            />
        </React.Fragment>
    );
};

export default AxisChart;